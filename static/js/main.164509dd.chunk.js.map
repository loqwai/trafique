{"version":3,"sources":["Board.jsx","Game.js","App.js","serviceWorker.js","index.js"],"names":["Board","ctx","G","moves","React","keyUpHandler","key","keepGoing","switchLanesLeft","switchLanesRight","window","addEventListener","removeEventListener","gameover","winner","isWinner","score","road","map","row","i","cell","j","value","className","type","onClick","renderRoad","player","x","y","getObjectOnRoad","length","Game","setup","random","Die","width","Array","fill","treeCount","push","generateRoad","players","first","turn","moveLimit","getKeepGoingPlayer","obstacle1","obstacle2","getSwitchLanesLeftPlayer","getSwitchLanesRightPlayer","endIf","currentPlayer","Client","game","board","numPlayers","ai","enumerate","move","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RA8DeA,G,MAjDD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,EAAGC,EAAY,EAAZA,MAavB,OAZAC,aAAgB,WACd,IAAMC,EAAe,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACtB,MAAY,YAARA,EAA0BH,EAAMI,YACxB,cAARD,EAA4BH,EAAMK,kBAC1B,eAARF,EAA6BH,EAAMM,wBAAvC,GAGF,OADAC,OAAOC,iBAAiB,QAASN,GAC1B,WACLK,OAAOE,oBAAoB,QAASP,OAIhC,4BACN,iCAtBa,SAAAJ,GAAG,OAAIA,EAAIY,UAAYZ,EAAIY,SAASC,OAsBtCC,CAASd,IAAT,0BAAoCA,EAAIY,SAASG,QAC5D,6BACE,6BACGd,EAAEe,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAa,sBAAId,IAAKc,GAC/BD,EAAID,KAAI,SAACG,EAAMC,GAAP,OAAc,sBAAIhB,IAAKgB,GAvB1B,WADKC,EAwBsCF,GAvB3B,eAChB,IAAVE,EAAoB,eACjB,MAHY,IAAAA,WA4BjB,uDACA,uBAAKC,UAAU,YACb,0BAAQC,KAAK,SAASC,QAASvB,EAAMK,iBAArC,gBACA,0BAAQiB,KAAK,SAASC,QAASvB,EAAMI,WAArC,UACA,0BAAQkB,KAAK,SAASC,QAASvB,EAAMM,kBAArC,oB,OCvCAkB,EAAa,SAAC,GAAgC,IAA9BV,EAA6B,EAA7BA,KAA6B,IAAvBW,OAAUC,EAAa,EAAbA,EAAGC,EAAU,EAAVA,EAGvC,OAFAb,EAAOA,EAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAID,KAAI,SAAAG,GAAI,MAAa,UAATA,EAAmB,EAAIA,SACzDS,GAAGD,GAAK,QACNZ,GAGHc,EAAkB,SAAC,GAAoB,IAAlBd,EAAiB,EAAjBA,KAAMY,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EAClC,OAAKb,EAAKa,GACND,EAAI,EAAU,EACdA,GAAKZ,EAAKa,GAAGE,OAAe,EACzBf,EAAKa,GAAGD,GAHM,GAwJRI,EA7DF,CACXC,MAAO,SAACjC,GACN,IAAMgB,EAzBW,SAAChB,GAMpB,IALA,IAAM+B,EAAS/B,EAAIkC,OAAOC,IAAI,IACxBC,EAAQpC,EAAIkC,OAAOC,IAAI,GAEzBnB,EAAO,GAEFG,EAAI,EAAGA,EAAIY,EAAQZ,IAAK,CAI/B,IAHA,IAAID,EAAMmB,MAAMD,GAAOE,KAAK,GAExBC,EAAYvC,EAAIkC,OAAOC,IAAIC,GAAS,EAC/Bf,EAAI,EAAGA,EAAIkB,EAAWlB,IAAK,CAElCH,EADWlB,EAAIkC,OAAOC,IAAIC,GAAS,GACvB,EAGdpB,EAAKwB,KAAKtB,GAKZ,OAFAF,EAAKA,EAAKe,OAAO,GAAG,GAAK,QAElBf,EAKQyB,CAAazC,GAO1B,MAAQ,CAAEgB,OAAM0B,QAAS,CAAEC,MALb,CACZf,EAAG,EACHC,EAAGb,EAAKe,OAAS,MAKrBa,KAAM,CACJC,UAAW,GAEb3C,MAAO,CACLI,UAAW,SAACL,GAAO,IAETe,EAAkBf,EAAlBe,KACFW,EAvGe,SAAC,EAAUX,GAAU,IAAlBY,EAAiB,EAAjBA,EAAGC,EAAc,EAAdA,EAE/B,OADkBC,EAAgB,CAAEd,OAAMY,IAAGC,EAAGA,EAAI,IAE3C,CAAED,IAAGC,KAGIC,EAAgB,CAAEd,OAAMY,IAAGC,EAAGA,EAAI,IAE3C,CAAED,IAAGC,EAAGA,EAAI,GAGd,CAAED,IAAGC,EAAGA,EAAI,GA4FAiB,CADW7C,EAAZyC,QAC4BC,MAAO3B,GAEjD,OAAO,eACFf,EADL,CAEEe,KAAMU,EAAW,CAAEV,OAAMW,WACzBe,QAAS,CACPC,MAAOhB,MAIbpB,gBAAiB,SAACN,GAChB,IAAM0B,EApGqB,SAACA,EAAQX,GAAU,IAC1CY,EAASD,EAATC,EAAGC,EAAMF,EAANE,EACLkB,EAAYjB,EAAgB,CAAEd,KAAMA,EAAMY,EAAGA,EAAI,EAAGC,EAAGA,EAAI,IAC3DmB,EAAYlB,EAAgB,CAAEd,KAAMA,EAAMY,EAAGA,EAAI,EAAGC,MAE1D,OAAIkB,EACEC,EACK,eAAKrB,EAAZ,CAAoBC,IAAGC,MAGlB,eACFF,EADL,CAEEC,EAAGA,EAAI,EACPC,MAIG,eACFF,EADL,CAEEC,EAAGA,EAAI,EACPC,EAAGA,EAAI,IAgFUoB,CAAyBhD,EAAEyC,QAAQC,MAAO1C,EAAEe,MAE3D,OAAO,eACFf,EADL,CAEEe,KAAMU,EAAW,CAAEV,KAAMf,EAAEe,KAAMW,WACjCe,QAAS,CACPC,MAAOhB,MAIbnB,iBAAkB,SAACP,GACjB,IAAM0B,EAvFsB,SAACA,EAAQX,GAAU,IAC3CY,EAASD,EAATC,EAAGC,EAAMF,EAANE,EACLkB,EAAYjB,EAAgB,CAAEd,KAAMA,EAAMY,EAAGA,EAAI,EAAGC,EAAGA,EAAI,IAC3DmB,EAAYlB,EAAgB,CAAEd,KAAMA,EAAMY,EAAGA,EAAI,EAAGC,MAE1D,OAAIkB,EACEC,EACK,eAAKrB,EAAZ,CAAoBC,IAAGC,MAGlB,eACFF,EADL,CAEEC,EAAGA,EAAI,EACPC,MAIG,eACFF,EADL,CAEEC,EAAGA,EAAI,EACPC,EAAGA,EAAI,IAmEUqB,CAA0BjD,EAAEyC,QAAQC,MAAO1C,EAAEe,MAE5D,OAAO,eACFf,EADL,CAEEe,KAAMU,EAAW,CAAEV,KAAMf,EAAEe,KAAMW,WACjCe,QAAS,CACPC,MAAOhB,OAKfwB,MAAO,WAAsCnD,GAAS,IAA5CgB,EAA2C,EAA3CA,KACR,GADmD,EAArC0B,QAAWC,MAASd,GACzB,EACP,MAAO,CACLhB,OAAQb,EAAIoD,cACZrC,MAAOC,EAAKe,OAAS/B,EAAI4C,QCpJlBS,cAAO,CAAEC,KAAMtB,EAAMuB,MAAOxD,EAAOyD,WAAY,EAAGC,GAAI,CACnEC,UAAW,iBACT,CACE,CAAEC,KAAM,aACR,CAAEA,KAAM,mBACR,CAAEA,KAAM,yBCEMC,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.164509dd.chunk.js","sourcesContent":["import * as React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Board.css'\n\nconst isWinner = ctx => ctx.gameover && ctx.gameover.winner\n\nconst cellContents = value => {\n  if (value === 'first') return 'üöò'\n  if (value === 1) return 'üå≤'\n  return null\n}\n\nconst Board = ({ ctx, G, moves }) => {\n  React.useEffect(() => {\n    const keyUpHandler = ({ key }) => {\n      if (key === 'ArrowUp') return moves.keepGoing()\n      if (key === 'ArrowLeft') return moves.switchLanesLeft()\n      if (key === 'ArrowRight') return moves.switchLanesRight()\n    }\n    window.addEventListener('keyup', keyUpHandler)\n    return () => {\n      window.removeEventListener('keyup', keyUpHandler)\n    }\n  })\n\n  return (<main>\n    <h1>&nbsp;{isWinner(ctx) && `You Win! score: ${ctx.gameover.score}`}</h1>\n    <table>\n      <tbody>\n        {G.road.map((row, i) => (<tr key={i}>\n          {row.map((cell, j) => (<td key={j}>{cellContents(cell)}</td>))}\n        </tr>))}\n      </tbody>\n    </table>\n    <p>Use the arrow keys to move</p>\n    <div className=\"keyboard\">\n      <button type=\"button\" onClick={moves.switchLanesLeft}>‚ÜñÔ∏è</button>\n      <button type=\"button\" onClick={moves.keepGoing}>‚¨Ü</button>\n      <button type=\"button\" onClick={moves.switchLanesRight}>‚ÜóÔ∏è</button>\n    </div>\n  </main>)\n}\n\nBoard.propTypes = {\n  ctx: PropTypes.shape({\n    gameover: PropTypes.shape({\n      winner: PropTypes.string,\n    }),\n  }),\n  G: PropTypes.shape({\n    road: PropTypes.arrayOf(PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    )),\n  }),\n  moves: PropTypes.shape({\n    keepGoing: PropTypes.func,\n    switchLanesLeft: PropTypes.func,\n    switchLanesRight: PropTypes.func,\n  }),\n}\n\nexport default Board","const renderRoad = ({ road, player: { x, y } }) => {\n  road = road.map(row => row.map(cell => cell === 'first' ? 0 : cell))\n  road[y][x] = 'first'\n  return road\n}\n\nconst getObjectOnRoad = ({ road, x, y }) => {\n  if (!road[y]) return 1\n  if (x < 0) return 1\n  if (x >= road[y].length) return 1\n  return road[y][x]\n}\n\nconst getKeepGoingPlayer = ({ x, y }, road) => {\n  const obstacle1 = getObjectOnRoad({ road, x, y: y - 1 })\n  if (obstacle1) {\n    return { x, y }\n  }\n\n  const obstacle2 = getObjectOnRoad({ road, x, y: y - 2 })\n  if (obstacle2) {\n    return { x, y: y - 1 }\n  }\n\n  return { x, y: y - 2 }\n}\n\nconst getSwitchLanesLeftPlayer = (player, road) => {\n  const { x, y } = player\n  const obstacle1 = getObjectOnRoad({ road: road, x: x - 1, y: y - 1 })\n  const obstacle2 = getObjectOnRoad({ road: road, x: x - 1, y })\n\n  if (obstacle1) {\n    if (obstacle2) {\n      return { ...player, x, y }\n    }\n\n    return {\n      ...player,\n      x: x - 1,\n      y,\n    }\n  }\n\n  return {\n    ...player,\n    x: x - 1,\n    y: y - 1,\n  }\n}\n\nconst getSwitchLanesRightPlayer = (player, road) => {\n  const { x, y } = player\n  const obstacle1 = getObjectOnRoad({ road: road, x: x + 1, y: y - 1 })\n  const obstacle2 = getObjectOnRoad({ road: road, x: x + 1, y })\n\n  if (obstacle1) {\n    if (obstacle2) {\n      return { ...player, x, y }\n    }\n\n    return {\n      ...player,\n      x: x + 1,\n      y,\n    }\n  }\n\n  return {\n    ...player,\n    x: x + 1,\n    y: y - 1,\n  }\n}\n\nconst generateRoad = (ctx) => {\n  const length = ctx.random.Die(30)\n  const width = ctx.random.Die(6)\n\n  let road = []\n\n  for (let i = 0; i < length; i++) {\n    let row = Array(width).fill(0)\n\n    let treeCount = ctx.random.Die(width) - 1\n    for (let j = 0; j < treeCount; j++) {\n      let lane = ctx.random.Die(width) - 1\n      row[lane] = 1\n    }\n\n    road.push(row)\n  }\n\n  road[road.length-1][0] = 'first'\n\n  return road\n}\n\nconst Game = {\n  setup: (ctx) => {\n    const road = generateRoad(ctx)\n\n    const first = {\n      x: 0,\n      y: road.length - 1,\n    }\n\n    return ({ road, players: { first } })\n  },\n  turn: {\n    moveLimit: 1,\n  },\n  moves: {\n    keepGoing: (G) => {\n\n      const { road, players } = G\n      const player = getKeepGoingPlayer(players.first, road)\n\n      return ({\n        ...G,\n        road: renderRoad({ road, player }),\n        players: {\n          first: player,\n        },\n      })\n    },\n    switchLanesLeft: (G) => {\n      const player = getSwitchLanesLeftPlayer(G.players.first, G.road)\n\n      return {\n        ...G,\n        road: renderRoad({ road: G.road, player }),\n        players: {\n          first: player,\n        },\n      }\n    },\n    switchLanesRight: (G) => {\n      const player = getSwitchLanesRightPlayer(G.players.first, G.road)\n\n      return {\n        ...G,\n        road: renderRoad({ road: G.road, player }),\n        players: {\n          first: player,\n        },\n      }\n    },\n  },\n  endIf: ({ road, players: { first: { y } } }, ctx) => {\n    if (y <= 0) {\n      return { \n        winner: ctx.currentPlayer, \n        score: road.length - ctx.turn,\n      }\n    }\n  },\n}\n\nexport default Game","import './App.css'\nimport { Client } from 'boardgame.io/react'\nimport Board from './Board.jsx'\nimport Game from './Game.js'\n\nexport default Client({ game: Game, board: Board, numPlayers: 1, ai: {\n  enumerate: () => (\n    [\n      { move: 'keepGoing' }, \n      { move: 'switchLanesLeft' }, \n      { move: 'switchLanesRight' },\n    ]\n  ),\n} })","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}